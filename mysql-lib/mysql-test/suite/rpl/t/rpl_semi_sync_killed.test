source include/have_semisync.inc;
source include/not_embedded.inc;
source include/have_innodb.inc;

--echo #
--echo # Preparation
--echo #

--echo # Make another connection to INSERT from.
connect (other,localhost,root,,);
connection other;
let $other_connection_id = `SELECT CONNECTION_ID()`;

connection default;

--echo # It's okay to see "Killed" but we should not see "Timeout" in the log.
call mtr.add_suppression("Killed waiting for reply of binlog");
call mtr.add_suppression("Run function 'after_commit' in plugin 'rpl_semi_sync_master' failed");

SET @saved_rpl_semi_sync_master_timeout         = @@global.rpl_semi_sync_master_timeout;
SET @@global.rpl_semi_sync_master_timeout       = 60000;

SET @saved_rpl_semi_sync_master_wait_no_slave   = @@global.rpl_semi_sync_master_wait_no_slave;
SET @@global.rpl_semi_sync_master_wait_no_slave = 1;

--disable_query_log
eval SET @other_connection_id = $other_connection_id;
--enable_query_log

CREATE TABLE t1 (i INT NOT NULL, PRIMARY KEY (i)) ENGINE=InnoDB;

RESET MASTER;
SET GLOBAL rpl_semi_sync_master_enabled = 1;

--echo #
--echo # Test killing a waiting thread
--echo #

--echo # Go ahead and send the INSERT; it should block.
connection other;
send INSERT INTO t1 (i) VALUES (1);

connection default;

let $wait_condition =
  SELECT COUNT(*) > 0 AS should_be_true
  FROM information_schema.processlist
  WHERE id = @other_connection_id
    AND state = "Waiting for semi-sync ACK from slave";
--source include/wait_condition.inc

--echo # The INSERT thread should now be waiting.
SELECT state AS should_be_waiting FROM information_schema.processlist WHERE id = @other_connection_id;

--echo # Kill the waiting thread; it should die immediately.
KILL @other_connection_id;

--echo # Collect the error from the INSERT thread; it should be disconnected.
connection other;
--error 2013
reap;

connection default;

--echo # Wait for INSERT thread to actually disappear (KILL closes connection
--echo # before thread actually finishes its processing).
let $wait_condition =
  SELECT COUNT(*) = 0 AS should_be_true
  FROM information_schema.processlist
  WHERE id = @other_connection_id;
--source include/wait_condition.inc

--echo # The INSERT thread should now be gone.
SELECT state AS should_be_empty_set FROM information_schema.processlist WHERE id = @other_connection_id;

--echo #
--echo # Try again, INSERT another row it should hang and semi-sync master
--echo # shouldn't be disabled.
--echo #
connection default;
disconnect other;
--echo # Reestablish the other connection.
connect (other,localhost,root,,);
connection other;
let $other_connection_id = `SELECT CONNECTION_ID()`;

connection default;
--disable_query_log
eval SET @other_connection_id = $other_connection_id;
--enable_query_log

--echo # Go ahead and send the INSERT; it should block.
connection other;
send INSERT INTO t1 (i) VALUES (2);

connection default;

let $wait_condition =
  SELECT COUNT(*) > 0 AS should_be_true
  FROM information_schema.processlist
  WHERE id = @other_connection_id
    AND state = "Waiting for semi-sync ACK from slave";
--source include/wait_condition.inc

--echo # The INSERT thread should now be waiting.
SELECT state AS should_be_waiting FROM information_schema.processlist WHERE id = @other_connection_id;

--echo # Kill the waiting thread.
KILL @other_connection_id;

--echo # Collect the error from the INSERT thread.
connection other;
--error 2013
reap;

connection default;
--echo # Wait for INSERT thread to actually disappear (KILL closes connection
--echo # before thread actually finishes its processing).
let $wait_condition =
  SELECT COUNT(*) = 0 AS should_be_true
  FROM information_schema.processlist
  WHERE id = @other_connection_id;
--source include/wait_condition.inc

--echo # The INSERT thread should now be gone.
SELECT state AS should_be_empty_set FROM information_schema.processlist WHERE id = @other_connection_id;

--echo #
--echo # Cleanup
--echo #

connection default;
disconnect other;
SET GLOBAL rpl_semi_sync_master_enabled = 0;
SET @@global.rpl_semi_sync_master_timeout       = @saved_rpl_semi_sync_master_timeout;
SET @@global.rpl_semi_sync_master_wait_no_slave = @saved_rpl_semi_sync_master_wait_no_slave;
DROP TABLE t1;
