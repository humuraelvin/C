#
# Preparation
#
call mtr.add_suppression("entry .* in mysql.user is ignored because it duplicates entry in mysql.system_user");
create database d1;
create table d1.t1 (n int);
# Check that the is_system_user() function exists and works.
select is_system_user() as should_be_0;
should_be_0
0
#
# Check that system_user works and does override mysql.user.
#
# Connect as regular user and check its permissions. This user has SELECT
# privileges globally and should be able to SELECT from d1.t1.
# Create a regular user.
insert into mysql.user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user1', 'localhost', 'Y', '', '', '', '');
flush privileges;
# Verify they are not seen as a system user and their access is correct.
select is_system_user() as should_be_0;
should_be_0
0
select * from d1.t1;
n
# Connect as system user and check that its permissions override regular user
# with the same name. The system user does *not* have global SELECT privilege
# so SELECT from d1.t1 should fail if the system_user is actually overriding
# the user privilege entry.
# Create a system_user in addition to the regular user.
insert into mysql.system_user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user1', 'localhost', 'N', '', '', '', '');
flush privileges;
# Verify that they are seen as a system user and their access is correct.
select is_system_user() as should_be_1;
should_be_1
1
select * from d1.t1;
ERROR 42000: SELECT command denied to user 'user1'@'localhost' for table 't1'
# Change system user's privileges and check that they are automatically
# updated in the session of a user who is already connected. The new
# INSERT privilege should be picked up by the session without the need
# to reconnect.
# Update the privileges of the existing user to add SELECT and INSERT.
update mysql.system_user set Select_priv = 'Y', Insert_priv = 'Y' where user = 'user1';
flush privileges;
# Verify that the new privileges are picked up automatically.
select is_system_user() as should_be_1;
should_be_1
1
insert into d1.t1 values (1);
select * from d1.t1;
n
1
#
# If a user entry is migrated from user to system_user or vice versa,
# their privileges should automatically be changed to the appropriate
# table without the need to reconnect. Check that appropriate switch
# happens automatically without re-connection.
#
# At this point, conn1 is connected as a system user. Removal of this
# user from the system_user table should update permissions on conn1 to
# the ones written in user table instead.
# Remove the user from the system_user table.
delete from mysql.system_user where User = 'user1';
flush privileges;
# Verify that access was updated to the entry from the user table.
select is_system_user() as should_be_0;
should_be_0
0
insert into d1.t1 values (2);
ERROR 42000: INSERT command denied to user 'user1'@'localhost' for table 't1'
select * from d1.t1;
n
1
# Adding the user back to the system_user table should cause permissions
# to be updated to the ones written in the system_user table, overriding
# the entry in the user table.
# Add the user to the system_user table.
insert into mysql.system_user (User, Host, Select_priv, Insert_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user1', 'localhost', 'N', 'Y', '', '', '', '');
flush privileges;
# Verify that access was updated to the entry from the system_user table.
select is_system_user() as should_be_1;
should_be_1
1
select * from d1.t1;
ERROR 42000: SELECT command denied to user 'user1'@'localhost' for table 't1'
insert into d1.t1 values (3);
select * from d1.t1;
n
1
3
# Clean up for the next set of tests.
delete from mysql.user where User = 'user1';
delete from mysql.system_user where User = 'user1';
flush privileges;
#
# System users are always preferred even if there's an anonymous user
# which would otherwise be preferred.
#
# Set up a normal user ('user1'@'local%') and an anonymous user
# (''@'localhost') and verify that the anonymous user is preferred over
# the normal user, as is default behavior.
# Add a regular user and an anonymous user.
insert into mysql.user (User, Host, Select_priv, Insert_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user1', 'local%', 'N', 'Y', '', '', '', '');
insert into mysql.user (User, Host, Select_priv, Insert_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('', 'localhost', 'Y', 'N', '', '', '', '');
flush privileges;
# Verify that the regular user takes precedence.
select user(), current_user();
user()	current_user()
user1@localhost	@localhost
select is_system_user() as should_be_0;
should_be_0
0
select * from d1.t1;
n
1
3
insert into d1.t1 values (4);
ERROR 42000: INSERT command denied to user ''@'localhost' for table 't1'
# Set up a system user ('user1'@'local%') and an anonymous user
# (''@'localhost') and verify that the system user is preferred over
# the anonymous user.
# Add a system user, overriding the regular user.
insert into mysql.system_user (User, Host, Select_priv, Insert_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user1', 'local%', 'N', 'Y', '', '', '', '');
flush privileges;
# Verify that the system user is preferred over the anonymous user.
select user(), current_user();
user()	current_user()
user1@localhost	user1@local%
select is_system_user() as should_be_1;
should_be_1
1
select * from d1.t1;
ERROR 42000: SELECT command denied to user 'user1'@'localhost' for table 't1'
insert into d1.t1 values (5);
# Clean up for the next set of tests.
select * from d1.t1;
n
1
3
5
delete from mysql.user where User = '' and Host = 'localhost';
delete from mysql.user where User = 'user1';
delete from mysql.system_user where User = 'user1';
flush privileges;
#
# Once an entry exists in the system_user table for a given user, it
# should not be possible to use the standard privilege maintenance
# commands, such as the GRANT, REVOKE, CREATE USER, DROP USER, and
# RENAME USER commands.
#
# Add a system user.
insert into mysql.system_user (User, Host, Select_priv, Insert_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user1', 'localhost', 'N', 'Y', '', '', '', '');
flush privileges;
# Verify that regular commands do not work with the system user.
grant SELECT on *.* to user1@localhost;
ERROR HY000: Incorrect usage of GRANT and SYSTEM USER
grant INSERT on *.* to user1@localhost;
ERROR HY000: Incorrect usage of GRANT and SYSTEM USER
drop user user1@localhost;
ERROR HY000: Incorrect usage of DROP and SYSTEM USER
create user user1@localhost identified by 'foo';
ERROR HY000: Operation CREATE USER failed for 'user1'@'localhost'
rename user user1@localhost to user2@localhost;
ERROR HY000: Incorrect usage of RENAME and SYSTEM USER
create user user2@localhost;
rename user user2@localhost to user1@localhost;
ERROR HY000: Incorrect usage of RENAME and SYSTEM USER
#
# The system_user table itself should require SUPER privilege to update
# even if the user has other privileges which would normally allow access
# to the table.
#
# Add INSERT, UPDATE, and DELETE privileges to user2.
grant SELECT, INSERT, UPDATE, DELETE on *.* to user2@localhost;
# Verify that user2 is not allowed to modify system_user.
select * from d1.t1;
n
1
3
5
select User, Host, Select_priv, Update_priv from mysql.system_user;
User	Host	Select_priv	Update_priv
user1	localhost	N	N
insert into mysql.system_user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user3', 'localhost', 'Y', '', '', '', '');
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
update mysql.system_user set Update_priv = 'Y' where User = 'user1';
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
delete from mysql.system_user where User = 'user1';
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
# Verify that user2 is allowed to modify mysql.user.
insert into mysql.user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user3', 'localhost', 'Y', '', '', '', '');
update mysql.user set Update_priv = 'Y' where User = 'user3';
select User, Host, Select_priv, Update_priv from mysql.user;
User	Host	Select_priv	Update_priv
root2	127.0.0.1	Y	Y
root2	::1	Y	Y
root	localhost	Y	Y
user2	localhost	Y	Y
user3	localhost	Y	Y
root	HOSTNAME	Y	Y
delete from mysql.user where User = 'user3';
#
# The gtid_slave_pos table should require SUPER privilege to be changed too
#
# Insert a dummy row into gtid_slave_pos.
insert into mysql.gtid_slave_pos values (0, 1, 1, 1);
# Verify that user2 is not allowed to modify gtid_slave_pos.
select * from mysql.gtid_slave_pos;
domain_id	sub_id	server_id	seq_no
0	1	1	1
insert into mysql.gtid_slave_pos values (1, 1, 2, 2);
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
update mysql.gtid_slave_pos set domain_id = 2 where domain_id = 0;
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
delete from mysql.gtid_slave_pos where domain_id = 0;
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
# Remove global privileges and add db-specific privileges to user2.
revoke all on *.* from user2@localhost;
grant SELECT, INSERT, UPDATE, DELETE on mysql.* to user2@localhost;
# Verify that user2 is not allowed to modify system_user.
select * from d1.t1;
ERROR 42000: SELECT command denied to user 'user2'@'localhost' for table 't1'
select User, Host, Select_priv, Update_priv from mysql.system_user;
User	Host	Select_priv	Update_priv
user1	localhost	N	N
insert into mysql.system_user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user3', 'localhost', 'Y', '', '', '', '');
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
update mysql.system_user set Update_priv = 'Y' where User = 'user1';
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
delete from mysql.system_user where User = 'user1';
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
# Verify that user2 is not allowed to modify gtid_slave_pos.
select * from mysql.gtid_slave_pos;
domain_id	sub_id	server_id	seq_no
0	1	1	1
insert into mysql.gtid_slave_pos values (1, 1, 2, 2);
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
update mysql.gtid_slave_pos set domain_id = 2 where domain_id = 0;
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
delete from mysql.gtid_slave_pos where domain_id = 0;
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
# Remove db-specific and add table-specific privileges to user2.
revoke all on mysql.* from user2@localhost;
grant SELECT, INSERT, UPDATE, DELETE on mysql.system_user to user2@localhost;
grant SELECT, INSERT, UPDATE, DELETE on mysql.gtid_slave_pos to user2@localhost;
# Verify that user2 is not allowed to modify system_user.
select * from d1.t1;
ERROR 42000: SELECT command denied to user 'user2'@'localhost' for table 't1'
select User, Host, Select_priv, Update_priv from mysql.system_user;
User	Host	Select_priv	Update_priv
user1	localhost	N	N
insert into mysql.system_user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('user3', 'localhost', 'Y', '', '', '', '');
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
update mysql.system_user set Update_priv = 'Y' where User = 'user1';
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
delete from mysql.system_user where User = 'user1';
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
# Verify that user2 is not allowed to modify gtid_slave_pos.
select * from mysql.gtid_slave_pos;
domain_id	sub_id	server_id	seq_no
0	1	1	1
insert into mysql.gtid_slave_pos values (1, 1, 2, 2);
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
update mysql.gtid_slave_pos set domain_id = 2 where domain_id = 0;
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
delete from mysql.gtid_slave_pos where domain_id = 0;
ERROR 42000: Access denied; you need (at least one of) the SUPER privilege(s) for this operation
# Remove table-specific privileges from user2.
revoke all on mysql.system_user from user2@localhost;
revoke all on mysql.gtid_slave_pos from user2@localhost;
delete from mysql.system_user;
delete from mysql.user where User = 'user1' or User = 'user2';
#
# The is_system_user flag should be set correctly when changing users
# on an existing connection.
#
# Create a system user and a non-system user for this test.
insert into mysql.system_user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('system_user', 'localhost', 'Y', '', '', '', '');
insert into mysql.user (User, Host, Select_priv, ssl_cipher, x509_issuer, x509_subject, authentication_string)
values ('normal_user', 'localhost', 'Y', '', '', '', '');
flush privileges;
# Verify that when initially connecting as normal_user and changing
# to system_user and back, is_system_user is always correct.
select is_system_user() as should_be_0;
should_be_0
0
select is_system_user() as should_be_1;
should_be_1
1
select is_system_user() as should_be_0;
should_be_0
0
# Verify that when initially connecting as system_user and changing
# to normal_user and back, is_system_user is always correct.
select is_system_user() as should_be_1;
should_be_1
1
select is_system_user() as should_be_0;
should_be_0
0
select is_system_user() as should_be_1;
should_be_1
1
# Clean up users from this test.
delete from mysql.system_user where user = "system_user";
delete from mysql.user where user = "normal_user";
flush privileges;
#
# Clean up.
#
drop database d1;
delete from mysql.system_user;
delete from mysql.user where User = 'user1' or User = 'user2';
flush privileges;
