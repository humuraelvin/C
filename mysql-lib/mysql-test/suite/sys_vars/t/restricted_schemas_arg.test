#
# Test for the restricted_schemas variable, using command-line options.
#

# This test should be skipped for embedded, as it relies on permissions.
--source include/not_embedded.inc

--echo #
--echo # Preparation
--echo #

--echo # Set up a user with all privileges except SUPER.

CREATE USER non_super;
GRANT ALL ON *.* to non_super;
REVOKE SUPER ON *.* from non_super;

--echo # Create databases 'a' and 'b' and a simple table 't' in each. We will also
--echo # use database 'c' below, but it intentionally does not exist.

CREATE DATABASE a;
CREATE TABLE a.t (s char(100) not null);
INSERT INTO a.t (s) VALUES ("a");

CREATE DATABASE b;
CREATE TABLE b.t (s char(100) not null);
INSERT INTO b.t (s) VALUES ("b");

--echo # Create connections for our 'non_super' user.

connect (non_super, localhost, non_super,,);

--echo #
--echo # Test that the functionality works.
--echo #

--echo # Test SUPER users with restricted_schemas. Everything should succeed.
connection default;

--echo # Access to 'a' should succeed.
USE a;
SELECT * FROM a.t;
SHOW TABLES FROM a;
SHOW CREATE TABLE a.t;
CREATE TABLE a.x (i INT NOT NULL, PRIMARY KEY (i));
ALTER TABLE a.x ADD j INT NOT NULL AFTER i;
SHOW CREATE TABLE a.x;
RENAME TABLE a.x TO a.y;
RENAME TABLE a.y TO a.x;
DROP TABLE a.x;

--echo # Access to 'b' should succeed.
USE b;
SELECT * FROM b.t;
SHOW TABLES FROM b;
SHOW CREATE TABLE b.t;
CREATE TABLE b.x (i INT NOT NULL, PRIMARY KEY (i));
ALTER TABLE b.x ADD j INT NOT NULL AFTER i;
SHOW CREATE TABLE b.x;
RENAME TABLE b.x TO b.y;
RENAME TABLE b.y TO b.x;
DROP TABLE b.x;

--echo # Access to 'c' should succeed.
CREATE DATABASE c;
ALTER DATABASE c CHARACTER SET = utf8;
DROP DATABASE c;

--echo # Test non-SUPER users with restricted_schemas.
connection non_super;

--echo # Access to 'a' should fail.
--error ER_DBACCESS_DENIED_ERROR
USE a;

--error ER_DBACCESS_DENIED_ERROR
SELECT * FROM a.t;

--error ER_DBACCESS_DENIED_ERROR
SHOW TABLES FROM a;

--error ER_TABLEACCESS_DENIED_ERROR
SHOW CREATE TABLE a.t;

--error ER_DBACCESS_DENIED_ERROR
CREATE TABLE a.x (i INT NOT NULL, PRIMARY KEY (i));

--error ER_DBACCESS_DENIED_ERROR
ALTER TABLE a.t ADD j INT NOT NULL AFTER s;

--error ER_DBACCESS_DENIED_ERROR
RENAME TABLE a.t TO a.x;

--error ER_DBACCESS_DENIED_ERROR
DROP TABLE a.t;

--echo # Access to 'b' should succeed.
USE b;
SELECT * FROM b.t;
SHOW TABLES FROM b;
SHOW CREATE TABLE b.t;
CREATE TABLE b.x (i INT NOT NULL, PRIMARY KEY (i));
ALTER TABLE b.x ADD j INT NOT NULL AFTER i;
SHOW CREATE TABLE b.x;
RENAME TABLE b.x TO b.y;
RENAME TABLE b.y TO b.x;
DROP TABLE b.x;

--echo # SELECT from information_schema should succeed and return tables
--echo # only from b.
SELECT table_schema, table_name
  FROM information_schema.tables
  WHERE table_schema in ("a", "b");

--echo # Access to 'c' should fail.
--error ER_DBACCESS_DENIED_ERROR
CREATE DATABASE c;

--error ER_DBACCESS_DENIED_ERROR
ALTER DATABASE c CHARACTER SET = utf8;

--error ER_DBACCESS_DENIED_ERROR
DROP DATABASE c;

--echo #
--echo # Test that the option can be changed at run-time.
--echo #

--echo # Set to a new value.
connection default;

SET GLOBAL restricted_schemas = "a,b,c";
SHOW GLOBAL VARIABLES LIKE 'restricted_schemas';

--echo # Set to empty.
connection default;

SET GLOBAL restricted_schemas = "";
SHOW GLOBAL VARIABLES LIKE 'restricted_schemas';

--echo #
--echo # Cleanup
--echo #

connection default;
--echo # Set the variable back to its startup value.
SET GLOBAL restricted_schemas = "a,c";
--echo # Remove the non-super user.
disconnect non_super;
DROP USER non_super;
--echo # Remove the databases created.
DROP DATABASE a;
DROP DATABASE b;

FLUSH PRIVILEGES;

